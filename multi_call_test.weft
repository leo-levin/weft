// Multi-Call Repeater System Test Case
// This demonstrates thread inputs, bundle parameters, and mixed arguments

// Load an image to work with
load("test.jpg")::img<r, g, b>

// Define a custom single-output spindle for testing
spindle colorShift(channel, shift, scale) :: adjusted {
  adjusted = (channel + shift) * scale
}

// Test 1: Thread input with bundle parameters
// This should expand to:
// colorShift(img@r, 0.1, 1.2)::enhanced<r>
// colorShift(img@g, 0.0, 1.1)::enhanced<g>
// colorShift(img@b, -0.1, 1.0)::enhanced<b>
colorShift<3>(img, <0.1, 0.0, -0.1>, <1.2, 1.1, 1.0>)::enhanced<r, g, b>

// Test 2: Mixed bundle and regular parameters
// Regular parameter 0.5 gets reused for all calls
colorShift<2>(<enhanced@r, enhanced@g>, 0.5, <0.8, 0.9>)::final<red, green>

// Test 3: Built-in spindle with multi-call (if recolor exists)
// This tests that built-in spindles work with the repeater syntax
// compose<3>(<0.8, 0.7, 0.6>, <final@red, final@green, 0.4>)::output<r, g, b>

// Simpler version using compose which should exist
compose<3>(<final@red, final@green, 0.4>)::output<r, g, b>

// Render the result
render(output)

// Test Error Cases (commented out - would cause parse errors):
// colorShift<2>(img, <0.1, 0.2, 0.3>)::bad<r, g>  // Bundle size mismatch
// colorShift<3>(img, <0.1, 0.2>)::bad<r, g, b>    // Bundle too small
// colorShift<2>(img, <0.1, 0.2>)::bad<r, g, b>    // Output count mismatch